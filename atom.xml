<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咕咕鸡从不咕咕</title>
  <icon>https://www.gravatar.com/avatar/ad492a2d1d9ad5830bcdd06209040c71</icon>
  <subtitle>啥也不会</subtitle>
  <link href="https://ggjcbgg.github.io/atom.xml" rel="self"/>
  
  <link href="https://ggjcbgg.github.io/"/>
  <updated>2022-08-18T05:25:35.729Z</updated>
  <id>https://ggjcbgg.github.io/</id>
  
  <author>
    <name>咕咕鸡从不咕咕</name>
    <email>1746644290@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring5</title>
    <link href="https://ggjcbgg.github.io/posts/58c6.html"/>
    <id>https://ggjcbgg.github.io/posts/58c6.html</id>
    <published>2022-08-14T07:04:17.000Z</published>
    <updated>2022-08-18T05:25:35.729Z</updated>
    
    <content type="html"><![CDATA[<div align="center"> <font size="50">Spring5框架</font></div><h2 id="1-Spring概念-（视频链接）"><a href="#1-Spring概念-（视频链接）" class="headerlink" title="1.Spring概念 （视频链接）"></a>1.Spring概念 <a href="https://www.bilibili.com/video/BV1Vf4y127N5?p=4&spm_id_from=pageDriver">（视频链接）</a></h2><ol><li><p>spring是轻量级的开源的Java EE框架</p></li><li><p>Spring可以解决企业应用开发的复杂性</p></li><li><p>Spring有两个核心部分：IOC和Aop</p><blockquote><p><strong>(1)</strong>  IOC:控制反转，把创建对象过程交给Spring进行管理（<font color="red">不需要new创建对象</font>）</p><p><strong>（2）</strong> Aop：面向切面，不修改源代码进行功能增强</p></blockquote></li><li><p>Spring特点：</p><ul><li><p>方便解耦，简化开发</p></li><li><p>Aop编程的支持</p></li><li><p>方便程序测试</p></li><li><p>方便和其他框架进行整合</p></li><li><p>方便进行事务操作</p></li><li><p>降低API开发难度</p><hr></li></ul><h3 id="Spring5下载文件"><a href="#Spring5下载文件" class="headerlink" title="Spring5下载文件"></a>Spring5下载文件</h3><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913093926874.png" alt="image-20210913093926874"></p><p>Spring中每种有三个文件：</p><ul><li>第一个为架包</li><li>第二个-javadoc为文档</li><li>第三个-sources为源代码</li></ul><hr><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913094557402.png" alt="image-20210913094557402"></p></li></ol><ul><li>Core Container：核心部分</li><li>Beans、Core：对应IOC</li><li>Context：上下文</li><li>Expression：表达式</li></ul><h2 id="2-IOC容器"><a href="#2-IOC容器" class="headerlink" title="2.IOC容器"></a>2.IOC容器</h2><h5 id="IOC-概念和原理）"><a href="#IOC-概念和原理）" class="headerlink" title="IOC(概念和原理）"></a>IOC(概念和原理）</h5><blockquote><p>1、什么是IOC</p></blockquote><blockquote><blockquote><ul><li>控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IOC的目的：为了耦合度降低</li></ul></blockquote><p>2、IOC底层原理：</p><blockquote><p>xml解析、工厂模式、反射</p></blockquote><p>3、画图讲解IOC底层原理</p><p><font color="red"><b>调用另一个类的方法:</b></font></p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913120109189.png" alt="image-20210913120109189"></p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913120814177.png" alt="image-20210913120814177"></p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913162824150.png" alt="image-20210913162824150"></p></blockquote><h5 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h5><ol><li><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p></li><li><p>Spring提供IOC容器实现两种方式：（两个接口）</p><blockquote><p>(1) BeanFactory : IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用</p><ul><li>加载配置文件的时候不会创建对象，在获取对象（使用）的时候才去创建对象</li></ul><p>(2) ApplicationContext : BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员使用</p><ul><li>加载配置文件的时候就会把配置文件对象进行创建</li></ul></blockquote></li><li><p>ApplicationContext接口有实现类</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913165428836.png" alt="image-20210913165428836"></p></li></ol><hr><h5 id="IOC操作Bean管理（概念）"><a href="#IOC操作Bean管理（概念）" class="headerlink" title="IOC操作Bean管理（概念）"></a>IOC操作Bean管理（概念）</h5><ol><li>什么是Bean管理<ul><li>Bean管理指的是两个操作</li><li>Spring创建对象</li><li>Spring注入属性</li></ul></li><li>Bean管理操作有两种方式<ul><li>基于xml配置文件方式实现</li><li>基于注解方式实现</li></ul></li></ol><h5 id="IOC操作Bean管理（基于xml方式）"><a href="#IOC操作Bean管理（基于xml方式）" class="headerlink" title="IOC操作Bean管理（基于xml方式）"></a>IOC操作Bean管理（基于xml方式）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--配置User对象创建--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.spring.test.User&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>（1）在spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建</p><p>（2）在bean标签有很多属性，介绍常用的属性</p><blockquote><ul><li>id属性：唯一标识</li><li>class属性：类全路径（包类路径）</li></ul></blockquote><p>（3）创建对象的时候，默认也是执行无参数构造方法完成对象创建</p><ol start="2"><li><p>基于xml方式注入属性</p><blockquote><p>（1）DI：依赖注入，就是注入属性</p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913215126794.png" alt="image-20210913215126794" style="zoom:60%;"></blockquote></li><li><p>第一种注入方式：使用set方法进行注入</p><p>（1）创建类，定义属性和对应的set方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">演示使用set方法进行注入属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    <span class="comment">//创建属性对应的set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBauthor</span><span class="params">(String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>(2) 在spring配置文件配置对象创建，配置属性注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="number">2</span> set 方法注入属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.spring.test.Book&quot;</span>&gt;</span><br><span class="line">    &lt;!--使用property完成属性注入</span><br><span class="line">    name:类里面属性名称</span><br><span class="line">    value：向属性注入的值</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;bname&quot;</span> value=<span class="string">&quot;xiaoai&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;bauthor&quot;</span> value=<span class="string">&quot;xiao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>第二种注入方式：使用有参数构造进行注入</p><p>(1) 创建类，定义属性，创建属性对应有参数构造方法</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210913231927303.png" alt="image-20210913231927303"></p><p>(2) 在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--有参数构造属性--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;orders&quot;</span> class=<span class="string">&quot;com.spring.test.Orders&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;oname&quot;</span> value=<span class="string">&quot;电脑&quot;</span>&gt; &lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;China&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210915194052986.png" alt="image-20210915194052986"></p></li></ol><hr><h5 id="IOC操作Bean管理（注入属性）"><a href="#IOC操作Bean管理（注入属性）" class="headerlink" title="IOC操作Bean管理（注入属性）"></a>IOC操作Bean管理（注入属性）</h5><ol><li><p>字面量</p><p>（1）null值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="literal">null</span>值--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="literal">null</span>/&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>（2）属性值包含特殊符号</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--属性值包含特殊符号</span><br><span class="line">   <span class="number">1</span> 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span><br><span class="line">   <span class="number">2</span> 把特殊符号内容写进CDATA 格式为：&lt;![CDATA[内容]]&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">    &lt;value&gt;&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><h5 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性-外部bean"></a>注入属性-外部bean</h5><blockquote><ul><li>创建两个类service类和dao类</li><li>在service调用dao里的方法</li><li>在spring配置文件中进行配置</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add..........&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="number">1</span> service和dao对象创建  接口不能<span class="keyword">new</span>对象，只能找接口的实现类--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> class=<span class="string">&quot;com.spring.test.service.UserService&quot;</span>&gt;</span><br><span class="line">        &lt;!--注入userDao对象</span><br><span class="line">        name属性值：类里面属性名称</span><br><span class="line">        ref属性：创建userDao对象bean标签的id值</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userDao&quot;</span> class=<span class="string">&quot;com.spring.test.dao.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>注入属性-内部bean</p><p>（1）一对多关系：部门和员工</p><p>一个部门有多个员工，一个员工属于一个部门</p><p>部门是一，员工是多</p><p>（2）在实体类之间表示一对多关系，员工表示所属的部门，使用对象类型属性进行表示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--内部bean--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.spring.test.bean.Emp&quot;</span>&gt;</span><br><span class="line">    &lt;!--设置两个普通属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;lucy&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--设置对象类型属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dept&quot;</span>&gt;</span><br><span class="line">        &lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.spring.test.bean.Dept&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;安保部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>注入属性-级联赋值</p><p>（1）第一种写法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--级联赋值--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.spring.test.bean.Emp&quot;</span>&gt;</span><br><span class="line">    &lt;!--设置两个普通属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;lucy&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--级联赋值--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dept&quot;</span> ref=<span class="string">&quot;dept&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.spring.test.bean.Dept&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;财务部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>第二种写法：</p><p>前提：dept要有get方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--级联赋值--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.spring.test.bean.Emp&quot;</span>&gt;</span><br><span class="line">    &lt;!--设置两个普通属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;ename&quot;</span> value=<span class="string">&quot;lucy&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--级联赋值--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dept&quot;</span> ref=<span class="string">&quot;dept&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dept.dname&quot;</span> value=<span class="string">&quot;技术部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.spring.test.bean.Dept&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;财务部&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><hr></li></ol><h5 id="IOC操作Bean管理（xml注入集合属性）"><a href="#IOC操作Bean管理（xml注入集合属性）" class="headerlink" title="IOC操作Bean管理（xml注入集合属性）"></a>IOC操作Bean管理（xml注入集合属性）</h5><ol><li>注入数组类型属性</li><li>注入List集合类型属性</li><li>注入Map集合类型属性</li></ol><p>（1）创建类，定义数组，list，map，set类型属性，生成对应set方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1 数组类型属性</span></span><br><span class="line"><span class="keyword">private</span> String[] courses;</span><br><span class="line"><span class="comment">//2 list集合类型属性</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"><span class="comment">//3 map集合类型属性</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"><span class="comment">//4 set集合类型属性</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sets = sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.maps = maps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.courses = courses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）在sprin配置文件进行配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="number">1</span> 集合类型属性注入--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;stu&quot;</span> class=<span class="string">&quot;com.spring5.collectiontype.Stu&quot;</span>&gt;</span><br><span class="line">    &lt;!--数组类型属性注入--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;courses&quot;</span>&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;value&gt;java课程&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;数据库课程&lt;/value&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--list类型属性注入--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;张三&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;李四&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--map类型属性注入--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;maps&quot;</span>&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key=<span class="string">&quot;JAVA&quot;</span> value=<span class="string">&quot;java&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;entry key=<span class="string">&quot;PHP&quot;</span> value=<span class="string">&quot;php&quot;</span>&gt;&lt;/entry&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!--set类型属性注入--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;sets&quot;</span>&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;value&gt;Mysql&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;Redis&lt;/value&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在集合里面设置对象类型值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--创建多个course对象--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;course1&quot;</span> class=<span class="string">&quot;com.spring5.collectiontype.Course&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;cname&quot;</span> value=<span class="string">&quot;Spring5框架&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;course2&quot;</span> class=<span class="string">&quot;com.spring5.collectiontype.Course&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;cname&quot;</span> value=<span class="string">&quot;MyBatis框架&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--注入list集合类型，值是对象--&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;courseList&quot;</span>&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">&quot;course1&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">&quot;course2&quot;</span>&gt;&lt;/ref&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>把集合注入的部分提取出来</p><p>（1）在spring配置文件中引入名称空间 util</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xmlns:util=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>（2）使用util标签完成list集合注入提取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="number">1</span> 提取list集合类型属性注入--&gt;</span><br><span class="line">&lt;util:list id=<span class="string">&quot;bookList&quot;</span>&gt;</span><br><span class="line">    &lt;value&gt;语文&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;数学&lt;/value&gt;</span><br><span class="line">    &lt;value&gt;英语&lt;/value&gt;</span><br><span class="line">&lt;/util:list&gt;</span><br><span class="line">&lt;!--<span class="number">2</span> 提取list集合类型属性注入使用--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.spring5.collectiontype.Book&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;list&quot;</span> ref=<span class="string">&quot;bookList&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="IOC操作Bean管理（FactoryBean）"><a href="#IOC操作Bean管理（FactoryBean）" class="headerlink" title="IOC操作Bean管理（FactoryBean）"></a>IOC操作Bean管理（FactoryBean）</h5><ol><li><p>Spring有两种类型bean，一种是普通的bean，另外一种是工厂bean（FactoryBean）</p></li><li><p>普通bean：在配置文件中定义bean类型就是返回类型</p></li><li><p>工厂bean：在配置文件定义bean类型可以和返回类型不一样</p><blockquote><p>第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean</p><p>第二步：实现接口里面的方法，在实现的方法中定义返回的bean类型</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">bean3.xml<span class="operator">:</span></span><br><span class="line"><span class="operator">&lt;</span>bean id<span class="operator">=</span><span class="string">&quot;myBean&quot;</span> <span class="built_in">class</span><span class="operator">=</span><span class="string">&quot;com.spring5.factorybean.MyBean&quot;</span><span class="operator">&gt;</span> <span class="operator">&lt;</span><span class="operator">/</span>bean<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">    <span class="type">Course</span> <span class="variable">myBean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(myBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="IOC操作Bean管理（bean作用域）"><a href="#IOC操作Bean管理（bean作用域）" class="headerlink" title="IOC操作Bean管理（bean作用域）"></a>IOC操作Bean管理（bean作用域）</h5><ol><li><p>在Spring里面，设置创建bean实例是单实例还是多实例</p></li><li><p>在Spring里面，默认情况下，bean是单实例对象</p><p><img src="/posts/58c6.htm/桌面\Screenshot_20210917_185341.jpg" alt="Screenshot_20210917_185341"></p></li><li><p>如何设置单实例还是多实例</p><p>（1）在spring配置文件bean标签里面有属性（scope）用于设置单实例还是多实例</p><p>（2）scope属性值</p><p>第一个值 默认值：singletton 表示单实例对象</p><p>第二个值 prototype,表示是多实例对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.spring5.collectiontype.Book&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;list&quot;</span> ref=<span class="string">&quot;bookList&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/58c6.htm/笔记\image-20210917191941074.png" alt="image-20210917191941074"></p><p>（3）singleton和prototype区别</p><p>第一：singleten 单实例，prototype 多实例</p><p>第二：设置scope值是singleten或空的时候，加载spring配置文件时候就会创建单实例对象</p><p>​          设置scope值是prototype的时候，不是在加载spring配置文件时候创建对象，在调用getBean方法的时候创建多实例</p><h5 id="IOC操作Bean管理（bean生命周期）"><a href="#IOC操作Bean管理（bean生命周期）" class="headerlink" title="IOC操作Bean管理（bean生命周期）"></a>IOC操作Bean管理（bean生命周期）</h5><ol><li><p>生命周期：</p><p>（1）从对象创建到对象销毁的过程</p></li><li><p>bean生命周期：</p><p>（1）通过构造器创建bean实例（无参数构造）</p><p>（2）为bean的属性设置值和对其他bean引用（调用set方法）</p><p>（3）调用bean的初始化的方法（需要进行配置初始化的方法）</p><p>（4）bean可以使用了（对象已经获取到了）</p><p>（5）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</p></li><li><p>演示bean生命周期</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="comment">//无参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步 执行无参数构造创建bean实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步 调用set方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;orders&quot;</span> class=<span class="string">&quot;com.spring5.bean.Orders&quot;</span> init-method=<span class="string">&quot;initMethod&quot;</span> destroy-method=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;oname&quot;</span> value=<span class="string">&quot;手机&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean3</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class="line">      <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line">      <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">      System.out.println(<span class="string">&quot;第四步 获取创建bean实例对象&quot;</span>);</span><br><span class="line">      System.out.println(orders);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//手动让bean实例销毁</span></span><br><span class="line">      context.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210918114613583.png" alt="image-20210918114613583"></p></li><li><p>bean的后置处理器，生命周期有七步</p><p>（1）通过构造器创建bean实例（无参数构造）</p><p>（2）为bean的属性设置值和对其他bean引用（调用set方法）</p><p>（3）把bean实例传递bean后置处理器的方法 postProcessBeforeInitialization</p><p>（4）调用bean的初始化的方法（需要进行配置初始化的方法）</p><p>（5）把bean实例传递bean后置处理器的方法 postProcessAfterInitialization</p><p>（6）bean可以使用了（对象已经获取到了）</p><p>（7）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</p></li><li><p>演示添加后置处理器效果</p><p>（1）创建类，实现接口BeanPostProcessor，创建后置处理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--配置后置处理器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myBeanPost&quot;</span> class=<span class="string">&quot;com.spring5.bean.MyBeanPost&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210919151426938.png" alt="image-20210919151426938"></p></li></ol><h5 id="IOC操作Bean管理（xml自动装配）"><a href="#IOC操作Bean管理（xml自动装配）" class="headerlink" title="IOC操作Bean管理（xml自动装配）"></a>IOC操作Bean管理（xml自动装配）</h5><ol><li><p>什么是自动装配</p><p>（1）根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值注入</p></li><li><p>演示自动装配过程</p><p>（1）根据属性名称自动注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--实现自动装配</span><br><span class="line">    bean标签属性autowire，配置自动装配</span><br><span class="line">    autowire属性常用两个值：</span><br><span class="line">        byName根据属性名称注入，注入值bean的id值和类属性名称一样  </span><br><span class="line">        byType根据属性类型注入</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.spring5.autowire.Emp&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>&gt;</span><br><span class="line">    &lt;!--&lt;property name=<span class="string">&quot;dept&quot;</span> ref=<span class="string">&quot;dept&quot;</span>&gt;&lt;/property&gt;--&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.spring5.autowire.Dept&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>（2）根据属性类型自动注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--实现自动装配</span><br><span class="line">    bean标签属性autowire，配置自动装配</span><br><span class="line">    autowire属性常用两个值：</span><br><span class="line">        byName根据属性名称注入，注入值bean的id值和类属性名称一样  </span><br><span class="line">        byType根据属性类型注入</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;emp&quot;</span> class=<span class="string">&quot;com.spring5.autowire.Emp&quot;</span> autowire=<span class="string">&quot;byType&quot;</span>&gt;</span><br><span class="line">    &lt;!--&lt;property name=<span class="string">&quot;dept&quot;</span> ref=<span class="string">&quot;dept&quot;</span>&gt;&lt;/property&gt;--&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;dept&quot;</span> class=<span class="string">&quot;com.spring5.autowire.Dept&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="IOC操作Bean管理（外部属性文件）"><a href="#IOC操作Bean管理（外部属性文件）" class="headerlink" title="IOC操作Bean管理（外部属性文件）"></a>IOC操作Bean管理（外部属性文件）</h5><ol><li><p>直接配置数据库信息</p><p>（1）配置德鲁伊连接池</p><p>（2）引入德鲁伊连接池依赖jar包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--直接配置连接池--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;&lt;!--驱动名称--&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;&lt;!--数据库地址--&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;12345678&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>引入外部属性文件配置数据库连接池</p><p>（1）创建外部属性文件，properties格式文件，写数据库信息</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210920230259870.png" alt="image-20210920230259870"></p><p>（2）把外部properties属性文件引入到spring配置文件中</p><blockquote><p>引入context名称空间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>在spring配置文件使用标签引入外部属性文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--引入外部的属性文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="line">&lt;!--配置连接池--&gt;</span><br><span class="line"> &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;&lt;!--驱动名称--&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;&lt;!--数据库地址--&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><hr><h5 id="IOC操作Bean管理（基于注解方式）"><a href="#IOC操作Bean管理（基于注解方式）" class="headerlink" title="IOC操作Bean管理（基于注解方式）"></a><font color="red">IOC操作Bean管理（基于注解方式）</font></h5><ol><li><p>什么是注解</p><p>（1）注解是代码特殊标记，格式：@注解名称（属性名称&#x3D;属性值，属性名称&#x3D;属性值…..）</p><p>（2）使用注解，注解作用在类上面，方法上面，属性上面</p><p>（3）使用注解目的：简化xml配置</p></li><li><p>Spring针对Bean管理中创建对象提供注解</p><p>（1）@Component：是基础注解，表示一个 JavaBean 可以被注入到 Spring 容器中</p><p>（2）@Service：用在业务层，用来处理业务逻辑</p><p>（3）@Controller：用在表现层，对来自前端的请求进行转发处理与重定向</p><p>（4）@Repository：用在持久层，标注 DAO 类，表示这个类可以对数据库进行数据的读取或者写入</p><blockquote><p>上面四个注解功能是一样的，都可以用来创建bean实例</p></blockquote></li><li><p>基于注解方式实现对象创建</p><p>第一步：引入依赖<img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210921101116564.png" alt="image-20210921101116564"></p><p>第二步：开启组件扫描</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   &lt;!--开启组件扫描</span><br><span class="line">   <span class="number">1</span> 如果扫描多个包，多个包使用逗号隔开</span><br><span class="line">   <span class="number">2</span> 扫描包的上层目录 </span><br><span class="line">   --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>第三步：创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在注解里面value属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写 UserService--userService</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span> </span><br><span class="line"><span class="comment">//&lt;bean id=&quot;userService&quot; class=&quot;com.service.UserService&quot;&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启组件扫描细节配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--示例<span class="number">1</span></span><br><span class="line">use-<span class="keyword">default</span>-filters=<span class="string">&quot;false 表示现在不使用默认的filter，自己配置filter</span></span><br><span class="line"><span class="string">context:include-filter，设置扫描哪些内容</span></span><br><span class="line"><span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;context:component-scan base-package=&quot;</span>com.spring5<span class="string">&quot; use-default-filters=&quot;</span><span class="literal">false</span><span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;context:include-filter type=&quot;</span>annotation<span class="string">&quot; expression=&quot;</span>org.springframework.stereotype.Controller<span class="string">&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;!--设置扫描注解为Controller的内容--&gt;</span></span><br><span class="line"><span class="string">&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!--示例2</span></span><br><span class="line"><span class="string">下面配置扫描包所有内容</span></span><br><span class="line"><span class="string">context:exclude-filter:设置哪些内容不进行扫描</span></span><br><span class="line"><span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;context:component-scan base-package=&quot;</span>com.spring5<span class="string">&quot;jiy&gt;</span></span><br><span class="line"><span class="string">    &lt;context:exclude-filter type=&quot;</span>annotation<span class="string">&quot; expression=&quot;</span>org.springframework.stereotype.Controller<span class="string">&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;!--设置不扫描注解为Controller的内容--&gt;</span></span><br><span class="line"><span class="string">&lt;/context:component-scan&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于注解方式实现属性注入</p><p>(1) @Autowired：根据属性类型进行自动装配</p><blockquote><p>第一步：把service和dao对象创建，在service和dao类添加创建对象注释</p><p>第二步：在service注入dao对象，在service类添加dao类型属性，在属性上面使用注释</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//定义dao类型属性</span></span><br><span class="line"> <span class="comment">//不需要添加set方法</span></span><br><span class="line"> <span class="comment">// 添加注入属性注解</span></span><br><span class="line"> <span class="meta">@Autowired</span>  <span class="comment">//根据类型进行注入</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">     userDao.add();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>(2) @Qualifier：根据名称进行注入</p><blockquote><p>这个@Qualifier注解的使用，和上面@Autowired一起使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//定义dao类型属性</span></span><br><span class="line"> <span class="comment">//不需要添加set方法</span></span><br><span class="line"> <span class="comment">// 添加注入属性注解</span></span><br><span class="line"> <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"> <span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span>  <span class="comment">//根据名称进行注入</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">     userDao.add();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;dao add....&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>(3) @Resource：可以根据类型注入，可以根据名称注入  (在javax拓展包中，不是spring提供的)</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Resource  //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></blockquote><p>(4) @Value：注入普通类型属性</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;service add....&quot;</span>+name);</span><br><span class="line">     userDao.add();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210921170841353.png" alt="image-20210921170841353"></p></blockquote></li></ol><h5 id="IOC完全注解开发"><a href="#IOC完全注解开发" class="headerlink" title="IOC完全注解开发"></a>IOC完全注解开发</h5><p>（1）创建配置类，替代xml配置文件</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.spring5&quot;&#125;)</span> <span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>（2）编写测试类</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Annotation:注解</span></span><br><span class="line"><span class="comment">//Config:配置</span></span><br><span class="line"><span class="comment">//ApplicationContext:配置文件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//加载配置类</span></span><br><span class="line"> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"> UserService userService=context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"> System.out.println(userService);</span><br><span class="line"> userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-Aop"><a href="#3-Aop" class="headerlink" title="3.Aop"></a>3.Aop</h2><h5 id="AOP-概念"><a href="#AOP-概念" class="headerlink" title="AOP(概念)"></a>AOP(概念)</h5><ol><li><p>什么是AOP</p><p>（1）面向切面编程（方面），利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p>（2）通俗描述：不通过修改源代码方式，在主干功能里添加新功能</p><p>（3）使用登录的例子说明AOP</p><img src="file:///C:\Users\江流\Documents\Tencent Files\1746644290\Image\C2C\499DF78997C0A5E663C1263BA6405902.jpg" alt="img" style="zoom:80%;"></li></ol><h5 id="AOP（底层原理）"><a href="#AOP（底层原理）" class="headerlink" title="AOP（底层原理）"></a>AOP（底层原理）</h5><ol><li><p>AOP底层使用动态代理</p><p>（1）有两种情况动态代理</p><blockquote><p>第一种：有接口情况，使用JDK动态代理</p><ul><li>创建接口实现类代理对象，增强类的方法</li></ul><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210921195834206.png" alt="image-20210921195834206"></p><p>第二种：没有接口情况，使用CGLIB代理</p><ul><li>创建子类的代理对象，增强类的方法</li></ul><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210922194435974.png" alt="image-20210922194435974"></p></blockquote><hr></li></ol><h5 id="AOP（JDK动态代理）"><a href="#AOP（JDK动态代理）" class="headerlink" title="AOP（JDK动态代理）"></a>AOP（JDK动态代理）</h5><ol><li><p>使用JDK动态代理，使用Proxy类里面的方法创建代理对象</p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210922195132462.png" alt="image-20210922195132462" align="left"><p>（1）调用newProxyInstance方法</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210922195809368.png" alt="image-20210922195809368"></p><p>方法有三个参数：</p><p>第一参数，类加载器</p><p>第二参数，增强方法所在的类，这个类实现的接口，支持多个接口</p><p>第三参数，实现这个接口InvocationHandler，创建代理对象，写增强的方法</p></li><li><p>JDK动态代理代码</p><p>（1）创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建接口实现类，实现方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用Proxy类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring5;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"><span class="comment">//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//                return null;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,<span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dao.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="comment">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">//有参数构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="string">&quot;:参数的传递....&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span>method.invoke(obj,args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行...&quot;</span>+obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210923203904005.png" alt="image-20210923203904005"></p></li></ol><h5 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP(术语)"></a>AOP(术语)</h5><ol><li><p>连接点 ：类里面哪些方法可以被增强，这些方法称为连接点</p></li><li><p>切入点 ：实际被真正增强的方法，称为切入点</p></li><li><p>通知（增强）</p><p>（1）实际增强的逻辑部分称为通知（增强）</p><p>（2）通知有多种类型</p><ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知：finally</li></ul></li><li><p>切面：是动作</p><p>（1）把通知应用到切入点过程</p><hr></li></ol><h5 id="AOP操作（准备）"><a href="#AOP操作（准备）" class="headerlink" title="AOP操作（准备）"></a>AOP操作（准备）</h5><ol><li><p>Spring框架一般都是基于AspectJ实现AOP操作</p><p>（1）什么是AspectJ</p><ul><li>AspectJ不是Spring组成部分，是独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</li></ul></li><li><p>基于AspectJ实现AOP操作</p><p>（1）基于xml配置文件实现</p><p>（2）基于注解方式实现（一般使用）</p></li><li><p>在项目工厂里面引入AOP相关依赖</p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210924131644127.png" alt="image-20210924131644127" style="zoom:80%;" align="left"></li><li><p>切入点表达式</p><p>（1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强</p><p>（2）语法结构：</p><ul><li>execution([权限修饰符] [返回类型] [类全路径] [方法名称] ([参数列表]))</li></ul><blockquote><p>举例1：对com.dao.BookDao类里面的add进行增强</p><ul><li>execution(* com.dao.BookDao.add(…));</li><li>[权限修饰符]为*任意类型   [返回类型] 可不写  </li><li>[类全路径] 为com.dao.BookDao ：  [方法名称]为add  ：([参数列表])为(…)</li></ul><p>举例2：对com.dao.BookDao类里面的所有方法进行增强</p><ul><li>execution(* com.dao.BookDao.*(…));</li></ul><p>举例3：对com.dao包里面所有类和类里面方法进行增强</p><ul><li>execution(* com.dao.*. *(…));</li></ul></blockquote></li></ol><hr><h5 id="AOP操作（AspectJ注解）"><a href="#AOP操作（AspectJ注解）" class="headerlink" title="AOP操作（AspectJ注解）"></a>AOP操作（AspectJ注解）</h5><ol><li><p>创建类，在类里面定义方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建增强类（编写增强逻辑）</p><p>（1）在增强类里面创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进行通知的配置</p><p>（1）在Spring配置文件中，开启注解扫描</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启注解扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5.aopanno&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>（2）使用注解创建User和UserProxy对象</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210924142243587.png" alt="image-20210924142243587" style="zoom:80%;" align="left"><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210924142337049.png" alt="image-20210924142337049" style="zoom:80%;"></p><p>（3）在增强类什么添加注解@Aspect</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）在spring配置文件中开启生成代理对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--开启Aspect生成代理对象--&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置不同类型的通知</p><p>（1）在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知（返回通知）</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturn.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前.....&quot;</span>);</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210924162427057.png" alt="image-20210924162427057" style="zoom:80%;"></li><li><p>相同的切入点抽取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相同的切入点抽取</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.spring5.aopanno.User.add())&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line"><span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有多个增强类对同一个方法进行增强，设置增强类优先级</p><p>（1）在增强类上面添加注解@Order(数字类型的值)，数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="AOP操作（AspectJ配置文件）"><a href="#AOP操作（AspectJ配置文件）" class="headerlink" title="AOP操作（AspectJ配置文件）"></a>AOP操作（AspectJ配置文件）</h5><ol><li><p>创建两个类，增强类和被增强类，创建方法</p></li><li><p>在spring配置文件中创建两个类对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--创建对象--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;book&quot;</span> class=<span class="string">&quot;com.spring5.aopxml.Book&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;bookProxy&quot;</span> class=<span class="string">&quot;com.spring5.aopxml.BookProxy&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>在spring配置文件中配置切入点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--配置aop增强--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--切入点--&gt;</span><br><span class="line">    &lt;aop:pointcut id=<span class="string">&quot;p&quot;</span> expression=<span class="string">&quot;execution(* com.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span><br><span class="line">    &lt;!--配置切面 ref指的是增强类--&gt;</span><br><span class="line">    &lt;aop:aspect ref=<span class="string">&quot;bookProxy&quot;</span>&gt;</span><br><span class="line">        &lt;!--增强作用在具体的方法上 pointcut-ref指的是作用在哪个类即被增强类--&gt;</span><br><span class="line">        &lt;aop:before method=<span class="string">&quot;before&quot;</span> pointcut-ref=<span class="string">&quot;p&quot;</span>&gt;&lt;/aop:before&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="AOP完全注解开发"><a href="#AOP完全注解开发" class="headerlink" title="AOP完全注解开发"></a>AOP完全注解开发</h5><p>创建配置类，不需要创建xml配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring5.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com&quot;&#125;)</span> <span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class="comment">//开启Aspect生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-JdbcTemplate"><a href="#4-JdbcTemplate" class="headerlink" title="4.JdbcTemplate"></a>4.JdbcTemplate</h2><h5 id="JdbcTemplate（概念和准备工作）"><a href="#JdbcTemplate（概念和准备工作）" class="headerlink" title="JdbcTemplate（概念和准备工作）"></a>JdbcTemplate（概念和准备工作）</h5><ol><li><p>什么是JdbcTemplate</p><ul><li>Spring框架对JDBC进行封装，使用JdbcTemplate方便实现数据库操作</li></ul></li><li><p>准备工作</p><ul><li><p>引入相关jar包</p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210925113817534.png" alt="image-20210925113817534" style="zoom: 80%;" align="left"></li><li><p>在spring配置文件配置数据库连接池</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--数据库连接池--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> destroy-method=<span class="string">&quot;close&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;10250511biubiu&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置JdbcTemplate对象，注入DataSource</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--JdbcTemplate对象--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;jdbcTemplate&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br><span class="line">    &lt;!--注入dataSource--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建service类，创建dao类，在dao注入JdbcTemplate对象</p><blockquote><p>配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--组件扫描--&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>Service文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"> <span class="comment">//注入dao</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//注入JdbcTemplate</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ol><h5 id="JdbcTemplate操作数据库（添加）"><a href="#JdbcTemplate操作数据库（添加）" class="headerlink" title="JdbcTemplate操作数据库（添加）"></a>JdbcTemplate操作数据库（添加）</h5><ol><li><p>对应数据库创建实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String ustatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUstatus</span><span class="params">(String ustatus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ustatus = ustatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUstatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ustatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写service和dao</p><ul><li><p>在dao进行数据库添加操作</p></li><li><p>调用JdbcTemplate对象里面update方法实现添加操作</p><ul><li><p>有两个参数</p></li><li><p>第一个参数：sql语句</p></li><li><p>第二个参数：可变参数。设置sql语句值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="comment">//1 创建sql语句</span></span><br><span class="line">        String sql=<span class="string">&quot;insert into t_book value(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">//2 调用方法实现</span></span><br><span class="line">        Object[] args = &#123;book.getUserId(),book.getUsername(),book.getUstatus()&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,args);</span><br><span class="line">        <span class="comment">//int update = jdbcTemplate.update(sql,book.getUserId(),book.getUsername(),book.getUstatus());</span></span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBook</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span>context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setUserId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        book.setUsername(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        book.setUstatus(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        bookService.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li></ul></li></ul></li></ol><h5 id="JdbcTemplate操作数据库（修改和删除）"><a href="#JdbcTemplate操作数据库（修改和删除）" class="headerlink" title="JdbcTemplate操作数据库（修改和删除）"></a>JdbcTemplate操作数据库（修改和删除）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    <span class="comment">//1 创建sql语句</span></span><br><span class="line">    String sql=<span class="string">&quot;update t_book set username = ?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line">    <span class="comment">//2 调用方法实现</span></span><br><span class="line">    Object[] args = &#123;book.getUsername(),book.getUstatus(),book.getUserId()&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,args);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> update= jdbcTemplate.update(sql,id);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JdbcTemplate操作数据库（查询返回某个值）"><a href="#JdbcTemplate操作数据库（查询返回某个值）" class="headerlink" title="JdbcTemplate操作数据库（查询返回某个值）"></a>JdbcTemplate操作数据库（查询返回某个值）</h5><ol><li><p>查询表里面有多少条记录，返回某个值</p></li><li><p>使用JdbcTemplate实现查询返回某个值代码</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210926103038444.png" alt="image-20210926103038444"></p><ul><li><p>有两个参数</p></li><li><p>第一个参数：sql语句</p></li><li><p>返回类型Class</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询表记录数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selectCount</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,Integer.class);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li></ul></li></ol><h5 id="JdbcTemplate操作数据库（查询返回对象）"><a href="#JdbcTemplate操作数据库（查询返回对象）" class="headerlink" title="JdbcTemplate操作数据库（查询返回对象）"></a>JdbcTemplate操作数据库（查询返回对象）</h5><ol><li><p>场景：查询图书详情</p></li><li><p>JdbcTemplate实现查询返回对象</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210926104758358.png" alt="image-20210926104758358"></p><ul><li><p>有三个参数</p></li><li><p>第一个参数：sql语句</p></li><li><p>第二个参数：RowMapper ：是接口，返回不同类型的数据，使用这个接口里面实现类完成数据封装</p></li><li><p>第三个参数：sql语句值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询返回对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBookInfo</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select * from t_book where user_id=?&quot;</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="JdbcTemplate操作数据库（查询返回集合）"><a href="#JdbcTemplate操作数据库（查询返回集合）" class="headerlink" title="JdbcTemplate操作数据库（查询返回集合）"></a>JdbcTemplate操作数据库（查询返回集合）</h5><ol><li><p>场景：查询图书列表分页…</p></li><li><p>调用JdbcTemplate方法实现查询返回集合</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210926111418111.png" alt="image-20210926111418111"></p><ul><li><p>有三个参数</p></li><li><p>第一个参数：sql语句</p></li><li><p>第二个参数：RowMapper ：是接口，返回不同类型的数据，使用这个接口里面实现类完成数据封装</p></li><li><p>第三个参数：sql语句值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询返回集合</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Book&gt; bookList=jdbcTemplate.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> bookList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr></li></ol><h5 id="JdbcTemplate操作数据库（批量操作）"><a href="#JdbcTemplate操作数据库（批量操作）" class="headerlink" title="JdbcTemplate操作数据库（批量操作）"></a>JdbcTemplate操作数据库（批量操作）</h5><ol><li><p>批量操作：操作表里面多条记录</p></li><li><p>JdbcTemplate实现批量添加操作</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210926112243272.png" alt="image-20210926112243272"></p><ul><li><p>有两个参数</p></li><li><p>第一个参数：sql语句</p></li><li><p>第二个参数：List集合，添加多头记录数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量添加</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book value(?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量添加测试</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;5&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用批量添加</span></span><br><span class="line">bookService.batchAdd(batchArgs);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JdbcTemplate实现批量修改操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;update t_book set username = ?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量修改</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;java12&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;java123&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;java134&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用方法实现批量修改</span></span><br><span class="line">bookService.batchUpdate(batchArgs);</span><br></pre></td></tr></table></figure></li><li><p>JdbcTemplate实现批量删除操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchDeleteBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line"><span class="comment">//调用方法实现批量删除</span></span><br><span class="line">bookService.batchDelete(batchArgs);</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-事务管理"><a href="#5-事务管理" class="headerlink" title="5.事务管理"></a>5.事务管理</h2><h5 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h5><ol><li><p>什么事务</p><p>（1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有</p><p>（2）典型场景：银行转账</p><p>​         lucy 转出 少钱</p><p>​         mary 收到转账 多钱</p></li><li><p>事务四个特性（ACID）</p><p>（1）原子性： </p><p>（2）一致性：</p><p>（3）隔离性：</p><p>（4）持久性：</p></li></ol><h5 id="事务操作（搭建事务操作环节）"><a href="#事务操作（搭建事务操作环节）" class="headerlink" title="事务操作（搭建事务操作环节）"></a>事务操作（搭建事务操作环节）</h5><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927091108527.png" alt="image-20210927091108527"></p><ol><li><p>创建数据库表，添加记录</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927091534733.png" alt="image-20210927091534733"></p></li><li><p>创建service，搭建dao，完成对象创建和注入关系</p><ul><li><p>service注入dao，在dao注入JdbcTemplate，在JdbcTemplate注入DataSource</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在dao创建两个方法，多钱和少钱的方法，在service中创建方法（转账的方法）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//lucy转账100给mary</span></span><br><span class="line">    <span class="comment">//多钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//少钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money+? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转账的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//lucy少100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line">        <span class="comment">//mary多100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAccount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    UserService userService=context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.accountMoney();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面代码，如果正常执行是没有问题的，但是如果代码执行过程中出现异常，有问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转账的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//lucy少100</span></span><br><span class="line">    userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟异常</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mary多100</span></span><br><span class="line">    userDao.addMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>上面问题如何解决</p><ul><li>使用事务进行解决</li></ul></li><li><p>事务操作过程</p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927101720001.png" alt="image-20210927101720001" style="zoom:80%;"></li></ul></blockquote></li></ol><hr><h5 id="事务操作（Spring事务管理介绍）"><a href="#事务操作（Spring事务管理介绍）" class="headerlink" title="事务操作（Spring事务管理介绍）"></a>事务操作（Spring事务管理介绍）</h5><ol><li><p>事务添加到javaEE三层结构里面Service层（业务逻辑层）</p></li><li><p>在Spring进行事务管理操作</p><ul><li>有两种方式：编程式事务管理和声明式事务管理（一般使用）</li></ul></li><li><p>声明式事务管理</p><ul><li>基于注解方式（一般使用）</li><li>基于xml配置文件方式</li></ul></li><li><p>在Spring进行声明式事务管理，底层使用AOP原理</p><p><font color="red"><em><strong>事务管理，底层使用AOP原理</strong></em></font></p></li><li><p>Spring事务管理API</p><ul><li><p>提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927104045496.png" alt="image-20210927104045496"></p></li></ul></li></ol><h5 id="事务操作（注解声明式事务管理）"><a href="#事务操作（注解声明式事务管理）" class="headerlink" title="事务操作（注解声明式事务管理）"></a>事务操作（注解声明式事务管理）</h5><ol><li><p>在spring配置文件配置事务管理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--创建事务管理器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">    &lt;!--注入数据源--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>在spring配置文件中，开启事务注解</p><ul><li><p>在spring配置文件中引入名称空间tx</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>开启事务注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--开启事务注解 transaction-manager指的是开启的事务管理器名称--&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>&gt;&lt;/tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在service类上面（获取service类里面方法上面）添加事务注解</p><ul><li><p>@Transactional，这个注解添加到类声明，也可以添加到方法上面</p></li><li><p>如果把这个注解添加到类上面，这个类里面所有的方法都添加事务</p></li><li><p>如果把这个注解添加到方法上面，则为这个方法添加事务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h5 id="事务操作（声明式事务管理参数配置）"><a href="#事务操作（声明式事务管理参数配置）" class="headerlink" title="事务操作（声明式事务管理参数配置）"></a>事务操作（声明式事务管理参数配置）</h5><ol><li><p>在service类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927163736787.png" alt="image-20210927163736787"></p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927163938362.png" alt="image-20210927163938362"></p></li><li><p>propagation：事务传播行为</p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927173542880.png" alt="image-20210927173542880" style="zoom:50%;"><ul><li><p>多事务方法直接进行调用，这个过程中事务是如何进行管理的</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927173927555.png" alt="image-20210927173927555"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span> <span class="comment">//默认情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ioslation：事务隔离级别</p><ul><li><p>事务由特性称为隔离性，多事务操作之间不会产生影响，不考虑隔离性产生很多问题</p></li><li><p>有三个读问题：脏读、不可重复读、虚（幻）读</p></li><li><p>脏读：一个未提交事务读取到另一个未提交事务的数据</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927175733413.png" alt="image-20210927175733413"></p></li><li><p>不可重复读：一个未提交事务读取到另一提交事务修改数据</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927180610796.png" alt="image-20210927180610796"></p><hr></li><li><p>虚（幻）读：一个未提交事务读取到另一提交事务添加数据</p><hr></li><li><p>解决：通过设置事务隔离级别，解决读问题</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20210927184441489.png" alt="image-20210927184441489"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span> <span class="comment">//默认情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>timeout：超时时间</p><ul><li>事务需要在一定时间内进行提交，如果不提交进行回滚</li><li>默认值是-1，设置时间以秒单位进行，-1为永不超时，无限大</li></ul></li><li><p>readOnly：是否只读</p><ul><li>读：查询操作，写：添加修改删除操作</li><li>readOnly默认值false，表示可以查询，可以添加修改删除操作</li><li>设置readOnly值是true，设置成true之后，只能查询</li></ul></li><li><p>rollbackFor：回滚</p><ul><li>设置出现哪些异常进行事务回滚</li></ul></li><li><p>noRollbackFor：不回滚</p><ul><li>设置出现哪些异常不进行事务回滚</li></ul></li></ol><hr><h5 id="事务操作（XML声明式事务管理）"><a href="#事务操作（XML声明式事务管理）" class="headerlink" title="事务操作（XML声明式事务管理）"></a>事务操作（XML声明式事务管理）</h5><ol><li><p>在spring配置文件中进行配置</p><ul><li><p>第一步：配置事务管理器</p></li><li><p>第二步：配置通知（增强的部分）</p></li><li><p>第三步：配置切入点和切面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--组件扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.spring5&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--数据库连接池--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> destroy-method=<span class="string">&quot;close&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;10250511biubiu&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--JdbcTemplate对象--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;jdbcTemplate&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br><span class="line">        &lt;!--注入dataSource--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--<span class="number">1</span> 创建事务管理器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;!--注入数据源--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--<span class="number">2</span> 配置通知--&gt;</span><br><span class="line">    &lt;tx:advice id=<span class="string">&quot;txadvice&quot;</span>&gt;</span><br><span class="line">        &lt;!--配置事务参数--&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;!--指定哪种规则的方法上面添加事务--&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;accountMoney&quot;</span> propagation=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">&quot;account*&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--<span class="number">3</span> 配置切入点和切面--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--配置切入点--&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">&quot;pt&quot;</span> expression=<span class="string">&quot;execution(* com.spring5.service.UserService.*(..))&quot;</span>/&gt;</span><br><span class="line">        &lt;!--配置切面--&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=<span class="string">&quot;txadvice&quot;</span> pointcut-ref=<span class="string">&quot;pt&quot;</span>/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h5 id="事务操作（完全注解声明式事务管理）"><a href="#事务操作（完全注解声明式事务管理）" class="headerlink" title="事务操作（完全注解声明式事务管理）"></a>事务操作（完全注解声明式事务管理）</h5><ol><li><p>创建配置类，使用配置类代替xml文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com&quot;)</span> <span class="comment">//开启组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;10250511biubiu&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="comment">//到IOC容器中根据类型找到dataSource</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">setDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager=<span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAccount2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TxConfig.class);</span><br><span class="line">    UserService userService=context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.accountMoney();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-Spring5新特性"><a href="#6-Spring5新特性" class="headerlink" title="6.Spring5新特性"></a>6.Spring5新特性</h2><h5 id="Spring5框架新功能"><a href="#Spring5框架新功能" class="headerlink" title="Spring5框架新功能"></a>Spring5框架新功能</h5><ol><li><p>整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</p></li><li><p>Spring5.0框架自带了通用的日志封装</p><ul><li>Spring5已经移除Log4jConfigListener，官方建议使用Log4j2</li><li>Spring5框架整合Log4j2</li></ul><p>第一步引入jar包</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211008110733844.png" alt="image-20211008110733844"></p><p>第二步 创建log4j2.xml配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="line">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span><br><span class="line">&lt;configuration status=<span class="string">&quot;INFO&quot;</span>&gt;</span><br><span class="line">    &lt;!--先定义所有的appender--&gt;</span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;!--输出日志信息到控制台--&gt;</span><br><span class="line">        &lt;console name=<span class="string">&quot;Console&quot;</span> target=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br><span class="line">            &lt;!--控制日志输出的格式--&gt;</span><br><span class="line">            &lt;PatternLayout pattern=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span><br><span class="line">    &lt;/console&gt;</span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line">    &lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br><span class="line">    &lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;root level=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">            &lt;appender-ref ref=<span class="string">&quot;Console&quot;</span>/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>Spring5框架核心容器支持@Nullable注解</p><p>(1) @Nullable注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</p><p>(2) 注解用在方法上面，方法返回值可以为空</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211012165555705.png" alt="image-20211012165555705"></p><p>(3) 注解使用在方法参数里面，方法参数可以为空</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211012165619276.png" alt="image-20211012165619276"></p><p>(4) 注解使用在属性说明，属性值可以为空</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211012170120905.png" alt="image-20211012170120905"></p></li><li><p>Spring5核心容器支持函数式风格GenericApplicationContext</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数式风格创建对象，交给spring进行管理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAccount3</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//1 创建GenericApplicationContext对象</span></span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    <span class="comment">//2 调用context的方法对象注册</span></span><br><span class="line">    context.refresh(); <span class="comment">//清空内容</span></span><br><span class="line">    context.registerBean(<span class="string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    <span class="comment">//3 获取在spring注册对象</span></span><br><span class="line">    <span class="comment">//User user = (User)context.getBean(&quot;com.spring5.test.User&quot;);</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spring5支持整合JUnit5</p><blockquote><p>JUnit4为了简化测试代码用注解的方式替代以下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">UserService userService=context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br></pre></td></tr></table></figure></blockquote><p>（1）整合JUnit4</p><p>第一步：引入Spring相关针对测试依赖</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211013194352797.png" alt="image-20211013194352797"></p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211013200129933.png" alt="image-20211013200129933"></p><p>第二步：创建测试类，使用注解方式完成</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//单元测试框架</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span> <span class="comment">//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JTest4</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）Spring5整合JUnit5</p><p>第一步：引入JUnit5的jar包</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211013201220618.png" alt="image-20211013201220618"></p><p>第二步：创建测试类，使用注解方式完成</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JTest5</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用一个复合注解替代上面两个注解完成整合</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JTest5</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="SpringWebflux"><a href="#SpringWebflux" class="headerlink" title="SpringWebflux"></a>SpringWebflux</h5><ol><li><p>SpringWebflux介绍：</p><p><img src="/posts/58c6.htm/Users\江流\AppData\Roaming\Typora\typora-user-images\image-20211013202630000.png" alt="image-20211013202630000"></p></li><li><p>响应式编程</p></li><li><p>Webflux执行流程和核心API</p></li><li><p>SpringWebflux（基于注解编程模型）</p></li><li><p>SpringWebflux（基于函数式编程模型）</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt; &lt;font size=&quot;50&quot;&gt;Spring5框架&lt;/font&gt;&lt;/div&gt;


&lt;h2 id=&quot;1-Spring概念-（视频链接）&quot;&gt;&lt;a href=&quot;#1-Spring概念-（视频链接）&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="spring" scheme="https://ggjcbgg.github.io/categories/spring/"/>
    
    
    <category term="spring" scheme="https://ggjcbgg.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ggjcbgg.github.io/posts/3eeb.html"/>
    <id>https://ggjcbgg.github.io/posts/3eeb.html</id>
    <published>2022-08-14T04:34:11.176Z</published>
    <updated>2022-08-15T11:41:44.269Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
